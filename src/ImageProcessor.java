import org.opencv.core.*;
import org.opencv.core.Point;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

/**
 * Created by Jannik on 27.10.15.
 */

// Detects faces in an image, draws boxes around them, and writes the results
// to "faceDetection.png".
public class ImageProcessor {

    Converter convert = new Converter();
    ResourceLoader loadResource = new ResourceLoader();

    public void detectFace(String URLString) {
        System.out.println("\nRunning DetectFace");

        // Create a face detector from the cascade file in the resources
        // directory.
        CascadeClassifier faceDetector = new CascadeClassifier(System.getProperty("user.dir") + "/src/resources/lbpcascade_frontalface.xml");
        BufferedImage buffImage = loadResource.imageFromURL(URLString);
        Mat image = convert.BufferedToMat(buffImage);

        // Detect faces in the image.
        // MatOfRect is a special container class for Rect.
        MatOfRect faceDetections = new MatOfRect();
        faceDetector.detectMultiScale(image, faceDetections);

        System.out.println(String.format("Detected %s faces", faceDetections.toArray().length));

        // Draw a bounding box around each face.
        for (Rect rect : faceDetections.toArray()) {
            Imgproc.rectangle(image, new Point(rect.x, rect.y), new Point(rect.x + rect.width, rect.y + rect.height), new Scalar(0, 255, 0));
        }

        saveMatAsPNG(image);
    }

    public void drawLettersOnGeneratedImage(String text, Color backgroundColor){

        //Load image generated by ImageProcessor as BufferedImage
        BufferedImage originalImage = null;
        try {
            originalImage = ImageIO.read(new File(System.getProperty("user.dir") + "/faceDetection.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        System.out.print("Applying text on image ... ");
        BufferedImage textImage = new BufferedImage(
                originalImage.getWidth(),
                originalImage.getHeight(),
                BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = textImage.createGraphics();
        FontRenderContext frc = g.getFontRenderContext();
        Font font = loadResource.customFont("Arial_Black.ttf", 240f); //(fontName, fontSize)
        GlyphVector gv = font.createGlyphVector(frc, text);
        Rectangle2D box = gv.getVisualBounds();
        int xOff = 25+(int)-box.getX();
        int yOff = 80+(int)-box.getY();
        Shape shape = gv.getOutline(xOff, yOff);
        g.setClip(shape);
        g.drawImage(originalImage, 0, 0, null);
        g.setClip(null);
        g.setStroke(new BasicStroke(2f));
        g.setColor(Color.BLACK);
        g.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g.draw(shape);

        g.dispose();

        textImage = setBackgroundColor(textImage, backgroundColor);
        saveBuffImgAsPNG(textImage);

        System.out.println("Success!");
    }

    private BufferedImage setBackgroundColor(BufferedImage buffImage, Color backgroundColor) {
        BufferedImage newBuffImage = new BufferedImage(buffImage.getWidth(),buffImage.getHeight(),BufferedImage.TYPE_INT_ARGB);
        for (int x = 0; x < buffImage.getWidth(); x++){
            for (int y = 0; y < buffImage.getHeight(); y++){
                int rgba = buffImage.getRGB(x,y);
                boolean isTrans = (rgba & 0xff000000) == 0;
                if (isTrans){
                    newBuffImage.setRGB(x, y, (backgroundColor.getRGB()));
                } else {
                    newBuffImage.setRGB(x, y, rgba);
                }
            }
        }

        return newBuffImage;
    }

    private void saveMatAsPNG(Mat image) {
        String filename = "faceDetection.png";
        System.out.println(String.format("Writing %s", filename));
        Imgcodecs.imwrite(filename, image);
        System.out.println("Image saved under " + System.getProperty("user.dir") + "/" + filename);
    }

    private void saveBuffImgAsPNG(BufferedImage buffImage) {
        try {


            ImageIO.write(buffImage, "png", new File(System.getProperty("user.dir") + "/faceDetection.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


}
